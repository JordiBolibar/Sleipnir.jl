name: Run Tests
on:
   pull_request:
    branches:
      - main
   push:
    branches: []
    tags: '*'
concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}
jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    defaults:
       run:
         shell: bash -el {0}
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.10'
        python:
          - '3.10'
        os: [ubuntu-latest, macos-latest]
        arch:
          - x64
    steps:
      # Cancel ongoing CI test runs if pushing to branch again before the previous tests
      # have finished
      - name: Cancel ongoing test runs for previous commits
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ github.token }}
      # Do tests
      - uses: actions/checkout@v4
      - name: Set up Python üêç ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: Install certifi and set SSL_CERT_FILE
        run: |
          pip install --upgrade certifi
          echo "SSL_CERT_FILE=$(python -c 'import certifi; print(certifi.where())')" >> $GITHUB_ENV
        shell: bash -el {0}
      - uses: julia-actions/setup-julia@latest
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - name: Check Julia SSL certifications üîéüîê
        run: julia -e 'using NetworkOptions; println(NetworkOptions.bundled_ca_roots()); println(NetworkOptions.ca_roots())'
        shell: bash -el {0}
      - name: Install dependencies on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libxml2
          echo "/usr/lib/x86_64-linux-gnu" | sudo tee -a /etc/ld.so.conf.d/libxml2.conf
          sudo ldconfig
        shell: bash -el {0}
      - name: Install dependencies on macOS
        if: matrix.os == 'macos-latest'
        run: |
          brew install libxml2
          export PKG_CONFIG_PATH="/usr/local/opt/libxml2/lib/pkgconfig"
        shell: bash -el {0}
      - uses: julia-actions/cache@v2
        with:
          cache-registries: "true"
          cache-compiled: "true"
      - uses: actions/cache@v4
        env:
          cache-name: cache-artifacts
        with:
          path: ~/.julia/artifacts
          key: ${{ runner.os }}-test-${{ env.cache-name }}-${{ hashFiles('**/Project.toml') }}
          restore-keys: |
            ${{ runner.os }}-test-${{ env.cache-name }}-
            ${{ runner.os }}-test-
            ${{ runner.os }}-
      - uses: julia-actions/julia-buildpkg@v1
        env:
          JULIA_SSL_CA_ROOTS_PATH: ""
      - uses: julia-actions/julia-runtest@latest
        env:
          JULIA_SSL_CA_ROOTS_PATH: ""
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v4
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          files: lcov.info
